{"version":3,"file":"squirrelly.runtime.js","sources":["../src/helpers.js","../src/filters.js","../src/partials.js","../src/runtime-utils.js"],"sourcesContent":["var helpers = {\r\n// No helpers are included by default for the sake of size,\r\n// But there's an example of a helper below\r\n/*\r\n  Date: function (args, content, blocks, options) {\r\n    var today = new Date()\r\n    var dd = today.getDate()\r\n    var mm = today.getMonth() + 1 // January is 0!\r\n    var yyyy = today.getFullYear()\r\n    if (dd < 10) {\r\n      dd = '0' + dd\r\n    }\r\n    if (mm < 10) {\r\n      mm = '0' + mm\r\n    }\r\n    today = mm + '/' + dd + '/' + yyyy\r\n    return today\r\n  } */\r\n}\r\n\r\nexport default helpers\r\n","var escMap = {\r\n  '&': '&amp;',\r\n  '<': '&lt;',\r\n  '\"': '&quot;',\r\n  \"'\": '&#39;'\r\n}\r\n\r\nfunction replaceChar (s) {\r\n  return escMap[s]\r\n}\r\n\r\nvar escapeRegEx = /[&<\"']/g\r\nvar escapeRegExTest = /[&<\"']/\r\n\r\nexport var filters = {\r\n  e: function (str) {\r\n    // To deal with XSS. Based on Escape implementations of Mustache.JS and Marko, then customized.\r\n    var newStr = String(str)\r\n    if (escapeRegExTest.test(newStr)) {\r\n      return newStr.replace(escapeRegEx, replaceChar)\r\n    } else {\r\n      return newStr\r\n    }\r\n  }\r\n}\r\n// Don't need a filter for unescape because that's just a flag telling Squirrelly not to escape\r\n\r\nexport var defaultFilters = {\r\n  /*\r\n  All strings are automatically passed through each of the default filters the user\r\n  Has set to true. This opens up a realm of possibilities.\r\n  */\r\n  // somefilter: false\r\n}\r\n\r\nexport var defaultFilterCache = {\r\n  // This is to prevent having to re-calculate default filters every time you return a filtered string\r\n  start: '',\r\n  end: ''\r\n}\r\n\r\nexport function setDefaultFilters (obj) {\r\n  if (obj === 'clear') { // If someone calls Sqrl.setDefaultFilters('clear') it clears all default filters\r\n    defaultFilters = {}\r\n  } else {\r\n    for (var key in obj) {\r\n      if (obj.hasOwnProperty(key)) {\r\n        defaultFilters[key] = obj[key]\r\n      }\r\n    }\r\n  }\r\n  cacheDefaultFilters()\r\n}\r\n\r\nexport var autoEscape = true\r\n\r\nexport function autoEscaping (bool) {\r\n  autoEscape = bool\r\n  return autoEscape\r\n}\r\n\r\nexport function cacheDefaultFilters () {\r\n  defaultFilterCache = {\r\n    start: '',\r\n    end: ''\r\n  }\r\n  for (var key in defaultFilters) {\r\n    if (!defaultFilters.hasOwnProperty(key) || !defaultFilters[key]) continue\r\n    defaultFilterCache.start += 'Sqrl.F.' + key + '('\r\n    defaultFilterCache.end += ')'\r\n  }\r\n}\r\nexport function parseFiltered (initialString, filterString) {\r\n  console.log(filterString)\r\n  var filtersArray\r\n  var safe = false\r\n  var filterStart = defaultFilterCache.start\r\n  var filterEnd = defaultFilterCache.end\r\n  if (filterString && filterString !== '') {\r\n    filtersArray = filterString.split('|')\r\n    console.log(filtersArray)\r\n    for (var i = 0; i < filtersArray.length; i++) {\r\n      console.log(i)\r\n      // I need to store filtersArray[i] in a variable\r\n      var filter = filtersArray[i].trim() // Removing the spaces just in case someone put | filter| or | filter | or something similar\r\n      console.log('filter: ' + filter)\r\n      if (filter === '') { continue }\r\n      if (filter === 'safe') {\r\n        console.log('safe')\r\n        // If 'safe' is one of the filters, set safe to true but don't add Sqrl.F.safe\r\n        // Essentially, 'safe' is a flag telling Squirrelly not to autoEscape\r\n        safe = true\r\n        continue\r\n      }\r\n      filterStart = 'Sqrl.F.' + filter + '(' + filterStart\r\n      filterEnd += ')'\r\n    }\r\n  }\r\n  if (!safe && autoEscape) {\r\n    filterStart += 'Sqrl.F.e('\r\n    filterEnd += ')'\r\n  }\r\n\r\n  return filterStart + initialString + filterEnd\r\n}\r\n\r\nfunction defineFilter (name, callback) {\r\n  filters[name] = callback\r\n}\r\n\r\nexport { filters as default, defineFilter }\r\n","var Partials = {/*\r\n    partialName: \"partialString\"\r\n*/}\r\n\r\nexport default Partials\r\n","import F from './filters'\r\n// import * as Sqrl from './runtime' // So we can pass Sqrl as a parameter to Render()\r\nimport H from './helpers'\r\nimport P from './partials'\r\n\r\nexport function defineFilter (name, callback) {\r\n  F[name] = callback\r\n}\r\n\r\nexport function defineHelper (name, callback) {\r\n  H[name] = callback\r\n}\r\n\r\nexport function Render (template, options) {\r\n  // If the template parameter is a function, call that function with (options, Sqrl)\r\n  // If it's a string, first compile the string and then call the function\r\n  if (typeof template === 'function') {\r\n    return template(options, { H: H, F: F, P: P })\r\n  } else {\r\n    return 'Err: Function must be 1st arg'\r\n  }\r\n}\r\n\r\nexport function definePartial (name, str) {\r\n  P[name] = str\r\n}\r\n"],"names":["helpers","escMap","&","<","\"","'","replaceChar","s","escapeRegEx","escapeRegExTest","filters","e","str","newStr","String","test","replace","defaultFilters","defaultFilterCache","start","end","Partials","name","callback","F","H","P","template","options","obj","key","hasOwnProperty","cacheDefaultFilters","bool"],"mappings":"iMAAA,IAAIA,EAAU,GCAVC,EAAS,CACXC,IAAK,QACLC,IAAK,OACLC,IAAK,SACLC,IAAK,SAGP,SAASC,EAAaC,GACpB,OAAON,EAAOM,GAGhB,IAAIC,EAAc,UACdC,EAAkB,SAEXC,EAAU,CACnBC,EAAG,SAAUC,GAEX,IAAIC,EAASC,OAAOF,GACpB,OAAIH,EAAgBM,KAAKF,GAChBA,EAAOG,QAAQR,EAAaF,GAE5BO,IAMFI,EAAiB,GAQjBC,EAAqB,CAE9BC,MAAO,GACPC,IAAK,ICtCP,IAAIC,EAAW,wBCKR,SAAuBC,EAAMC,GAClCC,EAAEF,GAAQC,kBAGL,SAAuBD,EAAMC,GAClCE,EAAEH,GAAQC,mBAaL,SAAwBD,EAAMV,GACnCc,EAAEJ,GAAQV,YAXL,SAAiBe,EAAUC,GAGhC,MAAwB,mBAAbD,EACFA,EAASC,EAAS,CAAEH,EAAGA,EAAGD,EAAGA,EAAGE,EAAGA,IAEnC,2DFsBJ,SAA4BG,GACjC,GAAY,UAARA,EACFZ,EAAiB,QAEjB,IAAK,IAAIa,KAAOD,EACVA,EAAIE,eAAeD,KACrBb,EAAea,GAAOD,EAAIC,KAc3B,WAKL,IAAK,IAAIA,KAJTZ,EAAqB,CACnBC,MAAO,GACPC,IAAK,IAESH,EACTA,EAAec,eAAeD,IAASb,EAAea,KAC3DZ,EAAmBC,OAAS,UAAYW,EAAM,IAC9CZ,EAAmBE,KAAO,KAlB5BY,mBAKK,SAAuBC,GAE5B,OADaA"}