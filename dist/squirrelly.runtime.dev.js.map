{"version":3,"file":"squirrelly.runtime.dev.js","sources":["../src/helpers.js","../src/filters.js","../src/partials.js","../src/runtime-utils.js","../src/runtime.js"],"sourcesContent":["var helpers = {\r\n// No helpers are included by default for the sake of size,\r\n// But there's an example of a helper below\r\n/*\r\n  Date: function (args, content, blocks, options) {\r\n    var today = new Date()\r\n    var dd = today.getDate()\r\n    var mm = today.getMonth() + 1 // January is 0!\r\n    var yyyy = today.getFullYear()\r\n    if (dd < 10) {\r\n      dd = '0' + dd\r\n    }\r\n    if (mm < 10) {\r\n      mm = '0' + mm\r\n    }\r\n    today = mm + '/' + dd + '/' + yyyy\r\n    return today\r\n  } */\r\n}\r\n\r\nexport default helpers\r\n","var escMap = {\r\n  '&': '&amp;',\r\n  '<': '&lt;',\r\n  '\"': '&quot;',\r\n  \"'\": '&#39;'\r\n}\r\n\r\nfunction replaceChar (s) {\r\n  return escMap[s]\r\n}\r\n\r\nvar escapeRegEx = /[&<\"']/g\r\nvar escapeRegExTest = /[&<\"']/\r\n\r\nexport var filters = {\r\n  e: function (str) {\r\n    // To deal with XSS. Based on Escape implementations of Mustache.JS and Marko, then customized.\r\n    var newStr = String(str)\r\n    if (escapeRegExTest.test(newStr)) {\r\n      return newStr.replace(escapeRegEx, replaceChar)\r\n    } else {\r\n      return newStr\r\n    }\r\n  }\r\n}\r\n// Don't need a filter for unescape because that's just a flag telling Squirrelly not to escape\r\n\r\nexport var defaultFilters = {\r\n  /*\r\n  All strings are automatically passed through each of the default filters the user\r\n  Has set to true. This opens up a realm of possibilities.\r\n  */\r\n  // somefilter: false\r\n}\r\n\r\nexport var defaultFilterCache = {\r\n  // This is to prevent having to re-calculate default filters every time you return a filtered string\r\n  start: '',\r\n  end: ''\r\n}\r\n\r\nexport function setDefaultFilters (obj) {\r\n  if (obj === 'clear') { // If someone calls Sqrl.setDefaultFilters('clear') it clears all default filters\r\n    defaultFilters = {}\r\n  } else {\r\n    for (var key in obj) {\r\n      if (obj.hasOwnProperty(key)) {\r\n        defaultFilters[key] = obj[key]\r\n      }\r\n    }\r\n  }\r\n  cacheDefaultFilters()\r\n}\r\n\r\nexport var autoEscape = true\r\n\r\nexport function autoEscaping (bool) {\r\n  autoEscape = bool\r\n  return autoEscape\r\n}\r\n\r\nexport function cacheDefaultFilters () {\r\n  defaultFilterCache = {\r\n    start: '',\r\n    end: ''\r\n  }\r\n  for (var key in defaultFilters) {\r\n    if (!defaultFilters.hasOwnProperty(key) || !defaultFilters[key]) continue\r\n    defaultFilterCache.start += 'Sqrl.F.' + key + '('\r\n    defaultFilterCache.end += ')'\r\n  }\r\n}\r\nexport function parseFiltered (initialString, filterString) {\r\n  console.log(filterString)\r\n  var filtersArray\r\n  var safe = false\r\n  var filterStart = defaultFilterCache.start\r\n  var filterEnd = defaultFilterCache.end\r\n  if (filterString && filterString !== '') {\r\n    filtersArray = filterString.split('|')\r\n    console.log(filtersArray)\r\n    for (var i = 0; i < filtersArray.length; i++) {\r\n      console.log(i)\r\n      // I need to store filtersArray[i] in a variable\r\n      var filter = filtersArray[i].trim() // Removing the spaces just in case someone put | filter| or | filter | or something similar\r\n      console.log('filter: ' + filter)\r\n      if (filter === '') { continue }\r\n      if (filter === 'safe') {\r\n        console.log('safe')\r\n        // If 'safe' is one of the filters, set safe to true but don't add Sqrl.F.safe\r\n        // Essentially, 'safe' is a flag telling Squirrelly not to autoEscape\r\n        safe = true\r\n        continue\r\n      }\r\n      filterStart = 'Sqrl.F.' + filter + '(' + filterStart\r\n      filterEnd += ')'\r\n    }\r\n  }\r\n  if (!safe && autoEscape) {\r\n    filterStart += 'Sqrl.F.e('\r\n    filterEnd += ')'\r\n  }\r\n\r\n  return filterStart + initialString + filterEnd\r\n}\r\n\r\nfunction defineFilter (name, callback) {\r\n  filters[name] = callback\r\n}\r\n\r\nexport { filters as default, defineFilter }\r\n","var Partials = {/*\r\n    partialName: \"partialString\"\r\n*/}\r\n\r\nexport default Partials\r\n","import F from './filters'\r\n// import * as Sqrl from './runtime' // So we can pass Sqrl as a parameter to Render()\r\nimport H from './helpers'\r\nimport P from './partials'\r\n\r\nexport function defineFilter (name, callback) {\r\n  F[name] = callback\r\n}\r\n\r\nexport function defineHelper (name, callback) {\r\n  H[name] = callback\r\n}\r\n\r\nexport function Render (template, options) {\r\n  // If the template parameter is a function, call that function with (options, Sqrl)\r\n  // If it's a string, first compile the string and then call the function\r\n  if (typeof template === 'function') {\r\n    return template(options, { H: H, F: F, P: P })\r\n  } else {\r\n    return 'Err: Function must be 1st arg'\r\n  }\r\n}\r\n\r\nexport function definePartial (name, str) {\r\n  P[name] = str\r\n}\r\n","export { default as H } from './helpers'\r\n// export { default as Compile } from './compile'\r\nexport {\r\n  defineFilter,\r\n  defineHelper,\r\n  //  defineNativeHelper,\r\n  definePartial,\r\n  Render\r\n//   renderFile,\r\n//   load,\r\n//   __express\r\n} from './runtime-utils'\r\nexport {\r\n  default as F,\r\n  setDefaultFilters,\r\n  autoEscaping\r\n} from './filters'\r\n// export { defaultTags } from './regexps'\r\n"],"names":["F","H","P"],"mappings":"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"}